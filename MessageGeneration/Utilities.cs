namespace RosNet.MessageGeneration;

internal static class Utilities
{
    internal const string BLOCK_COMMENT =
        @"/* 
 * This message is auto generated by RosNet. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/revolventnu/rosnet> 
 */
";

    internal const string ONE_TAB = "    ";
    internal const string TWO_TABS = "        ";

    internal static readonly Dictionary<string, string> BuiltInTypesMapping = new()
    {
        { "bool", "bool" },
        { "int8", "sbyte" },
        { "uint8", "byte" },
        { "int16", "short" },
        { "uint16", "ushort" },
        { "int32", "int" },
        { "uint32", "uint" },
        { "int64", "long" },
        { "uint64", "ulong" },
        { "float32", "float" },
        { "float64", "double" },
        { "string", "string" },
        { "time", "Time" },
        { "duration", "Duration" },
        { "char", "byte" }, // Deprecated alias for uint8 -> byte  in C#
        { "byte", "sbyte" } // Deprecated alias for int8  -> sbyte in C#
    };

    internal static readonly Dictionary<string, string> BuiltInTypesDefaultInitialValues = new()
    {
        { "bool", "false" },
        { "sbyte", "0" },
        { "byte", "0" },
        { "short", "0" },
        { "ushort", "0" },
        { "int", "0" },
        { "uint", "0" },
        { "long", "0" },
        { "ulong", "0" },
        { "float", "0.0f" },
        { "double", "0.0" },
        { "string", "\"\"" },
        { "Time", "new Time()" },
        { "Duration", "new Duration()" }
    };

    internal static string CapitalizeFirstLetter(string s) => char.ToUpper(s[0]) + s[1..];

    internal static string PascalCase(string s)
    {
        string[] words = s.Split('_');
        for (int i = 0; i < words.Length; i++)
        {
            words[i] = Utilities.CapitalizeFirstLetter(words[i]);
        }
        return string.Join("", words);

    }

    internal static string ResolvePackageName(string s)
    {
        if (s.Contains("_msgs") || s.Contains("_srvs") || s.Contains("_actions"))
        {
            return PascalCase(s[..s.LastIndexOf('_')]);
        }
        return s.Contains('_') ? PascalCase(s) : Utilities.CapitalizeFirstLetter(s);
    }
}
